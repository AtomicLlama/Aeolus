{
  "name": "Aeolus",
  "tagline": "The instant REST API by Atomic Llama",
  "body": "![Aeolus](https://raw.githubusercontent.com/AtomicLlama/Aeolus/master/aeolusgit.png \"The instant REST API\")\r\n\r\nHello! This is Aeolus. The instant REST API by Atomic Llama.\r\n\r\nAeolus allows you to create a fast, simple and extendible REST API in seconds.\r\n\r\nOne of the key features of the framework is that it allows you to how a website and your REST API on the same server with the minimal amount of code.\r\n\r\n## Installing Aeolus\r\n\r\nAeolus works with node and you can use it to start from scratch or compliment your current project.\r\n\r\n### Starting From Scratch\r\n\r\nTo create a new project with Aeolus you will need [NodeJS](http://nodejs.org) and [npm](http://npmjs.com) installed.\r\n\r\nOnce done with that. You can install Aeolus from the terminal.\r\n\r\n```\r\n$ npm install aeolus -g\r\n```\r\n\r\nTo create your project you can navigate to the folder where you want it (or create one) and run our wizard with\r\n\r\n```\r\n$ aeolus\r\n```\r\n\r\nSimply follow the steps and you will have a whole project already in front of you!\r\n\r\n### Add Aeolus to your current project\r\n\r\nPerhaps you already know a bit about Node and don't need our wizard.\r\n\r\nSimply run:\r\n\r\n```\r\n$ npm install aeolus --save\r\n```\r\n\r\nAnd our Framework will be already installed for you to use.\r\n\r\n## Staring it\r\n\r\nTo use kickstart Aeolus you simply have to call the function createServer with the port number you want it to listen to.\r\n\r\nWe recommend having this code:\r\n\r\n```javascript\r\nvar Aeolus = require('Aeolus');\r\n\r\nvar port = process.env.PORT || 8080;\r\n\r\nAeolus.createServer(port);\r\n```\r\n\r\n## More Options\r\n\r\n### Other folders\r\n\r\nAeolus will by default listen to the \"/methods\" and \"/www\" folders for your API and public page. But you can give Aeolus another path to listen to instead with the functions .methods and .www. For Example:\r\n\r\n\r\n```javascript\r\nAeolus.methods(\"/api\");  // API Methods are now in the /api folder\r\nAeolus.methods(\"/html\"); // Web page is now in the /html folder\r\n```\r\n\r\n### Authentification\r\n\r\nYou can tell Aeolus how authentication works in your site by providing an authentication function.\r\nThis function would take a username and a password and return if it's valid or not. So that all methods marked as needing Authentication will prompt the user for a password.\r\n\r\nYou can enter this function by calling auth. For Example:\r\n\r\n```javascript\r\nvar Aeolus.auth(function(name,pass) {\r\n  return name === \"root\" && pass === \"alpine\";\r\n});\r\n```\r\n\r\n### Error handling\r\n\r\nOne of the many features of the Framework is that you can also specify what will happen when there are any errors, when catching exceptions, handling resources that couldn't be found, etc.\r\n\r\nAeolus provides two important error handlers:\r\n\r\nThe .onError handler that will be fired up when there Aeolus couldn't find what the user was looking for or an internal error occurred and .unauthorised that will be called when a user tried to access something without authorisation. For example:\r\n\r\n```javascript\r\nvar Aeolus.onError(function(request,response,message) {\r\n  if (message == \"TypeError: \") {\r\n    response.respondPlainText(\"Internal Error\",501);\r\n  } else {\r\n    response.redirect(\"/404\");\r\n  }\r\n});\r\n```\r\n\r\nBuilt with **â™¥** by Atomic Llama",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}