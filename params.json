{
  "name": "Aeolus",
  "tagline": "The instant REST API by Atomic Llama",
  "body": "![alt text](https://raw.githubusercontent.com/AtomicLlama/Aeolus/master/aeolusgit.png \"Logo Title Text 1\")\r\n---\r\n\r\nHello! This is Aeolus. The instant REST API by Atomic Llama.\r\n\r\nAeolus allows you to create a fast, simple and extendible REST API in seconds.\r\n\r\nOne of the key features of the framework is that it allows you to host a website and your REST API on the same server with the minimal amount of code.\r\n\r\n## Installing Aeolus\r\n\r\nAeolus works with node and you can use it to start from scratch or compliment your current project.\r\n\r\n### Starting From Scratch\r\n\r\nTo create a new project with Aeolus you will need Node and npm installed http://nodejs.org and https://www.npmjs.com\r\n\r\nOnce done with that. You can install Aeolus from the terminal.\r\n\r\n```\r\n$ npm install aeolus -g\r\n```\r\n\r\nTo create your project you can navigate to the folder where you want it (or create one) and run our wizard with\r\n\r\n```\r\n$ aeolus\r\n```\r\n\r\nSimply follow the steps and you will have a whole project already in front of you!\r\n\r\n### Add Aeolus to your current project\r\n\r\nPerhaps you already know a bit about Node and don't need our wizard.\r\n\r\nSimply run:\r\n\r\n```\r\n$ npm install aeolus --save\r\n```\r\n\r\nAnd our Framework will be already installed for you to use.\r\n\r\n## Staring it\r\n\r\nTo use kickstart Aeolus you simply have to call the function createServer with the port number you want it to listen to.\r\n\r\nWe recommend having this code:\r\n\r\n```javascript\r\nvar Aeolus = require('Aeolus');\r\n\r\nvar port = process.env.PORT || 8080;\r\n\r\nAeolus.createServer(port);\r\n```\r\n\r\n## More Options\r\n\r\n### Other folders\r\n\r\nAeolus will by default listen to the \"/methods\" and \"/www\" folders for your API and public page. But you can give Aeolus another path to listen to instead with the functions .methods and .www. For Example:\r\n\r\n\r\n```javascript\r\nAeolus.methods(\"/api\");  // API Methods are now in the /api folder\r\nAeolus.methods(\"/html\"); // Web page is now in the /html folder\r\n```\r\n\r\n### Authentification\r\n\r\nYou can tell Aeolus how authentication works in your site by providing an authentication function.\r\nThis function would take a username and a password and callback a function with a boolean value (representing if the auth info is valid). So that all methods marked as needing Authentication will prompt the user for a password.\r\n\r\nYou can enter this function by calling auth. For Example:\r\n\r\n```javascript\r\nAeolus.auth(function(name,pass,callback) {\r\n  var valid = name === \"root\" && pass === \"alpine\";\r\n  callback(valid);\r\n});\r\n```\r\n\r\n### Error handling\r\n\r\nOne of the many features of the Framework is that you can also specify what will happen when there are any errors, when catching exceptions, handling resources that couldn't be found, etc.\r\n\r\nAeolus provides two important error handlers:\r\n\r\nThe .onError handler that will be fired up when there Aeolus couldn't find what the user was looking for or an internal error occurred and .unauthorised that will be called when a user tried to access something without authorisation. For example:\r\n\r\n```javascript\r\nAeolus.onError(function(request,response,message) {\r\n  if (message.indexOf(\"TypeError\") >= 0) {\r\n    response.respondPlainText(\"Internal Error\",501);\r\n  } else {\r\n    response.redirect(\"/404\");\r\n  }\r\n});\r\n```\r\n\r\nAnd the .unauthorised handler that gets called when the auth information entered by the user is incorrect!\r\n\r\n```javascript\r\nAeolus.unauthorised(function(request,response) {\r\n  response.promptForPassword(\"Please enter a password\");\r\n});\r\n```\r\n\r\n## Having a public page\r\n\r\nOne of the great things about Aeolus is that it allows you to create an API and at the same time serve your own webpage!\r\n\r\nAeolus will by default make anything inside the \"/www\" folder public. So basically every single document inside the \"/www\" folder will have it's own url.\r\n\r\nYou can obviously change the path of the folder with the function:\r\n\r\n```javascript\r\nAeolus.www('/path/to/new/folder');\r\n```\r\n\r\n## Methods\r\n\r\nMethods are the key to your REST API!\r\nYou will have to create a Method Object in it's own file for every action available in your API.\r\n\r\nThe key is understanding the file structure and how to create your objects.\r\n\r\n### The File Structure\r\n\r\nIn your methods folder you will have a subfolder for every type of action. **(GET, POST, PUT, DELETE)**\r\nInside those folders will be a file for every url you are responding to.\r\n**It's important to note that the file names will be used as their urls and they are case sensitive**\r\n\r\nFor instance if your API only listens for a **GET** at \"/hello\": You have to create a file \"hello.js\" inside \"/methods/get\".\r\n\r\n### Creating The Method\r\n\r\nThe big question is what should the file look like. Take this simple HelloWorld example:\r\n\r\n```javascript\r\nvar Method = require('Aeolus').Method;\r\n\r\nvar HelloWorld = new Method();\r\nHelloWorld.handle(function(request, response) {\r\n  response.respondPlainText(\"Hello World!\");\r\n});\r\n\r\nmodule.exports = HelloWorld;\r\n```\r\n\r\n### Options\r\n\r\n#### Authentification\r\n\r\n##### Asking For Authentication\r\n\r\nIf your method requires authentication simply call the .setHasAuth function. For Example with the HelloWorld Method:\r\n\r\n```javascript\r\nHelloWorld.setHasAuth(true);\r\n```\r\n\r\nThis makes it so that if the Method get's called, the global Authentication Handler will be called first. If it doesn't clear up, the method won't even be called.\r\n\r\n##### Special Authentication Handler\r\n\r\nSometimes you need different Authentication handlers for different Methods. No problem!\r\nYou can add special handler that will only be called with that method by calling the function .auth. For example if the HelloWorld method only works for the user \"root\":\r\n\r\n```javascript\r\nHelloWorld.auth(function(name, pass, callback) {\r\n  callback(name === \"root\" && pass === \"alpine\");\r\n});\r\n```\r\n\r\n#### Smart Methods and Nested URLs\r\n\r\nDo you want special resources with more complicated URLs? Well that's pretty simple. Simple use a \".\" instead of a \"/\" in the filename and the URL will be nested.\r\n\r\nFor instance \"methods/get/user.friends.js\" handles GET requests to \"/user/friends\".\r\n\r\nIf your url needs a parameter that's simple too! Just write the parameter into the filename with \"(name)\" surrounding it. And that parameter will be available with request.getParameter(name).\r\n\r\nFor example if you have a get request for every user in your database and what everyone to have it's own url. Just create a method in \"methods/get/user.(id).js\". To get the id entered just write:\r\n\r\n```javascript\r\nvar Method = require('Aeolus').Method;\r\n\r\nvar User = new Method();\r\nUser.handle(function(request, response) {\r\n  var id = request.getParameter(\"id\");\r\n  response.respondPlainText(\"Hi, user \" + id);\r\n});\r\n\r\nmodule.exports = User;\r\n```\r\n\r\n## Requests\r\n\r\nAll your methods get called with a special Request object. Here is what you can do with it:\r\n\r\n### Get Authentication Data\r\n\r\nIf you need to access that info from the method you can at all times get them directly:\r\n\r\n```javascript\r\nvar username = request.getUsername();\r\nvar password = request.getPassword();\r\n```\r\n\r\n### Get Parameters\r\n\r\nYou can get any parameter that may be embedded into the url.\r\n\r\n```javascript\r\nvar query = request.getParameter('query');\r\n```\r\n\r\n### Get the body of the Message\r\n\r\nTo get the body of the message (Should only be used for POST) there's the .getBody function\r\n\r\n```javascript\r\nvar data = request.getBody();\r\n```\r\n\r\n### Get the original request Object\r\n\r\nFor those who know Node better, you can also directly handle the regular http response object:\r\n\r\n```javascript\r\nvar req = request.getRequestObject();\r\n```\r\n\r\n## Responses\r\n\r\nJust like with the Requests, you also get special Response objects with their only simplifications.\r\n\r\n### Respond\r\n\r\nThere are many ways you can quickly respond. Status and headers are always optional and the defaults will be used if you don't specify them.\r\n\r\n#### JSON\r\n\r\n```javascript\r\nvar myObject = {\r\n  name: \"My Object\",\r\n  id: 42\r\n};\r\nresponse.respondJSON(myObject);\r\n```\r\n\r\nOr if you want to include more information like the header:\r\n\r\n```javascript\r\nvar headers = {\r\n  'Access-Control-Allow-Origin': '*',\r\n  'Access-Control-Allow-Methods': 'GET, POST',\r\n  'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\r\n};\r\nresponse.respondJSON(myObject, 201, headers);\r\n```\r\n\r\n#### Plain Text\r\n\r\nThe same goes for when responding only with text:\r\n\r\n```javascript\r\nresponse.respondPlainText(\"This is my response: 42\");\r\n```\r\n\r\n#### A File\r\n\r\nSimply call the function with the path to the file. You are not allowed to put your own headers on this one.\r\n\r\n```javascript\r\nresponse.respondFile(\"path/to/file.ext\");\r\n```\r\n\r\n### Prompt for password\r\n\r\nIf you think the user forgot to put the auth info on there request you can prompt them again:\r\n\r\n```javascript\r\nresponse.promptPassword(\"Please Enter a Password\");\r\n```\r\n\r\n### Redirect the user to somewhere else\r\n\r\nYou can also simply redirect the user to another place with, for example:\r\n\r\n```javascript\r\nresponse.redirect(\"http://www.google.com\");\r\n```\r\n\r\n### Get The Original Object\r\n\r\nWe can also give you the regular response object that if you need something more tailored or down at the metal.\r\n\r\n```javascript\r\nvar res = response.getResponseObject();\r\n```\r\n\r\nBuilt with **♥** by Atomic Llama\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}